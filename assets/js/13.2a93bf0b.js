(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{362:function(e,t,i){"use strict";i.r(t);var a=i(42),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h1",{attrs:{id:"vue基础知识"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#vue基础知识"}},[e._v("#")]),e._v(" vue基础知识")]),e._v(" "),i("blockquote",[i("p",[e._v("Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，\nVue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方\n库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够\n为复杂的单页应用提供驱动。")])]),e._v(" "),i("h3",{attrs:{id:"几种模式介绍"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#几种模式介绍"}},[e._v("#")]),e._v(" 几种模式介绍#")]),e._v(" "),i("h3",{attrs:{id:"mvc（model-view-controller）模式"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#mvc（model-view-controller）模式"}},[e._v("#")]),e._v(" MVC（Model View Controller）模式")]),e._v(" "),i("p",[e._v("MVC 是比较直观的架构模式，即用户操作 →View（负责接收用户的输入操作）→Controller\n（业务逻辑处理）→Model（数据持久化）→View（将结果反馈给 View）。")]),e._v(" "),i("p",[i("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/WXda9MIjaibBnia87NKx6Gibziac8BV1uygCQAAPD5PC5EPA92zEibyNTVqbQ8xdkN19bwB4SyaqxyIUTibyJCibBwZsw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"Image text"}})]),e._v(" "),i("h3",{attrs:{id:"mvp（model-view-presenter）模式"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#mvp（model-view-presenter）模式"}},[e._v("#")]),e._v(" MVP（Model View Presenter）模式")]),e._v(" "),i("p",[e._v("MVP 是把 MVC 中的 Controller 换成了 Presenter（呈现），目的就是为了完全切断 View 跟\nModel 之间的联系，由 Presenter 充当桥梁，做到 View-Model 之间通信的完全隔离。\n"),i("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/WXda9MIjaibBnia87NKx6Gibziac8BV1uygCLH9SQ92oEMiamxVrdojjlnOAABRKibBaBcfL3RT2LzQ2ibuBmDbbeooRQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"Image text"}})]),e._v(" "),i("h3",{attrs:{id:"mvvm（model-view-viewmodel）模式"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#mvvm（model-view-viewmodel）模式"}},[e._v("#")]),e._v(" MVVM（Model View ViewModel）模式")]),e._v(" "),i("p",[e._v("如果说 MVP 是对 MVC 的进一步改进，那么 MVVM 则是思想的完全变革。\nMVVM 是将“数据模型数据双向绑定”的思想作为核心，因此在 View 和\nModel 之间没有联系，而是通过 ViewModel 进行交互，而且 Model 和\nViewModel 之间的交互是双向的，因此视图数据的变化会同时修改数据源，\n而数据源数据的变化也会立即反应到 View 上。")]),e._v(" "),i("h3",{attrs:{id:"mvvm-模式的优点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#mvvm-模式的优点"}},[e._v("#")]),e._v(" MVVM 模式的优点")]),e._v(" "),i("ul",[i("li",[e._v("视图层低耦合")])]),e._v(" "),i("p",[e._v("视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的 View 上，当 View 变化的时候 Model 可以不变，当\nModel 变化的时候 View 也可以不变。")]),e._v(" "),i("ul",[i("li",[e._v("各种代码写成控件之后可重用")])]),e._v(" "),i("p",[e._v("可以把一些视图逻辑放在一个 ViewModel 里面成为多重可以组合的控件，在具体的页面中进行整合和使用，让更多 View 重用这段视图逻辑。")]),e._v(" "),i("ul",[i("li",[e._v("可以交由前端工程师独立开发")])]),e._v(" "),i("p",[e._v("开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，通过相应的接口规范可以简单地进行整合。")]),e._v(" "),i("ul",[i("li",[e._v("便于测试和部署")])]),e._v(" "),i("p",[e._v("界面向来是比较难于测试的，而现在测试可以针对具体的页面控件来写，也可以在不依赖于后端的基础上，直接通过工具或者假数据进行测试。")]),e._v(" "),i("p",[i("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_jpg/WXda9MIjaibBnia87NKx6Gibziac8BV1uygCTkwaJvFHXgRtaNq4G5LAGBYRVMLU14PZLmX2xUs1d1HUUQtu2btibVQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"Image text"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);